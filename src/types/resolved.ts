import { ResolvedRouteQuery } from '@/types/resolvedQuery'
import { ExtractRouteParamTypes, NamedNotDisabledRoute, RoutePropsWithMeta } from '@/types/route'

/**
 * Represents a route that the router has matched to current browser location.
 * @template TRoute - Underlying Route that has been resolved.
 */
export type ResolvedRoute<TRoute extends NamedNotDisabledRoute = NamedNotDisabledRoute> = {
  /**
   * The specific route properties that were matched in the current route.
  */
  matched: RoutePropsWithMeta,
  /**
   * The specific route properties that were matched in the current route, including any ancestors.
   * Order of routes will be from greatest ancestor to narrowest matched.
  */
  matches: RoutePropsWithMeta[],
  /**
   * Unique identifier for the route, generated by joining route `name` by period. Key is used for routing and for matching.
  */
  key: TRoute['key'],
  /**
   * Accessor for query string values from user in the current browser location.
  */
  query: ResolvedRouteQuery,
  /**
   * Key value pair for route params, values will be the user provided value from current browser location.
  */
  params: ExtractRouteParamTypes<TRoute>,
}